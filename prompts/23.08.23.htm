<html>
<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - Aug 23</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>

</head>
<body>
  <div class="container larger">
    <h3>Notes for Wednesday, August 23</h3>
    <p>
    	HW1 is now available on CMS. If you are on the waitlist you will not yet have CMS access -- you will receive an extension for any assignments before your enrollment date.
    </p>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-fa2023">course Github repository</a> Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute "python" in cmd for version number). You probably have python 3.
    </p>
    <p>
      We will be working in Javascript for most of the term. It can act pretty oddly, especially in comparison to languages that strictly type objects. <br/>
      What are some of the unusual aspects of this language? Open a console in your browser...
    </p>
    <p>
      Time permitting, let's also review <a href="https://www.json.org/json-en.html">Javascript Object Notation</a>.
    </p>
    
    <svg width=100 height=100> <rect id="rectangle" x=10 y=10 width=80 height=80 fill="steelblue" /> </svg>
    
    
    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>


    <!--- Code for today's class --->
    <script id="notes1">

      // Try pasting these commands into your browser console
      
      // Console.log is our friend
      console.log('Hello World');

      // Let's explore some Javascript types!
      console.log("--- Checking out some types ---")
      console.log(typeof(1));
      console.log(typeof(1.2));
      console.log(typeof(Math.PI));

      console.log(typeof("Hello."));
      console.log(typeof('Hello.'));
      console.log(typeof(`Hello.`));

      console.log(typeof("你好"));

      console.log(Math);
      console.log(new Object());

      console.log(typeof(null)); // None
      console.log(typeof(undefined)); // None

      console.log("lists and dicts");
      let list = [1,2,3];
      console.log(list);
      console.log(typeof(list));
      let dict = {"a": 1, "b": 2};
      console.log(dict);
      console.log(typeof(dict));

      list["key"] = "this works";
      console.log(list);
      console.log(list.key);
      
      
      
      
      
      // Learn a bit more about Objects
      // console.log("--- Testing [] and {} ---")

      
      
      

      
      // So what can accept keys?
      // console.log("--- So what works like a dict? ---");
      // let differentTypes = [3, "hello", new Object(), [1,2,3], function(x) {}, console];
      // for (let item of differentTypes) {
      //   console.log( item, typeof(item) );
      //   item['test'] = "keyAdded";
      //   console.log( item['test'] ); 
      // } 
      
      
      // Types can get a bit unexpected in JS
      console.log("--- Now exploring type coercion ---")

      console.log(3 + "Rzeszotarski");
      console.log("1" + 2);
      console.log(4 + true);
      console.log("true" + false);
      console.log(true + false);
      console.log([1,2,3] + 2);

      let color = "red";
      document.getElementById("rectangle").setAttribute("fill", color);
      
      
      
      // Why does this matter?
      
      
      
      
      // Comparison weirdness
      console.log("--- Now trying some comparisons ---")
      console.log((true+1) === "2"); // this is true because one of the thing gets converted
      console.log(0 == '0'); // true
      console.log([] == 0); // true
      console.log([1] == true); // true
      console.log([0] == true); // false
      console.log([[[]]] == 0); // true
      
      // type testing
      console.log(0 === '0'); // explicit comparsion, does not allow type coercion

      cosnole.log(6 + null); // 6
      cosnole.log(null === 0); // false
      cosnole.log(null === undefined); // false
      cosnole.log(NaN === NaN); // false, NaN cannot equal anything, can check using isNaN()
      console.log([1,2,3] === [1,2,3]); // false because not the same object
      

      // Shortcircuiting of logical statements
      console.log("--- Shortcircuiting ---");
      true || console.log("logged-or") || false;
      true && console.log("logged-and") && false;




    </script>


    <script id="notes2">
    
      // How do two script tags interact with each other?
      let test = "script tags. how do they work?";
      
      
      // * Let's talk JSON
      
      

      // let obj = [{"name":"DDWA", "number":3300 },{"name": "Java", "number": 2110},{"name": "Python", "number": 1110}];
      // console.log(obj);
      


      // This one won't parse because it breaks JSON specifications
      // let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'
      
      
      
      

    </script>
    
    
    
    
    

    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
    document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
    hljs.initHighlightingOnLoad();
    </script>

  </div>
</body>
</html>
